// map the specific app errors to their respective http error codes.
const getHttpError = (code = 500, name = 'INTERNAL_SERVER_ERROR') => new class extends Number {
  get String() { return this.name; }

  constructor() {
    super(code);
    this.name = name;
  }
}();

export default {
  INTERNAL_SERVER_ERROR: getHttpError(),
  PRE_CONDITION_FAILED: getHttpError(412, 'PRE_CONDITION_FAILED'),
  UNAUTHORIZED: getHttpError(401, 'UNAUTHORIZED'),
  WRONG_CREDENTIALS: getHttpError(401, 'WRONG_CREDENTIALS'),
  INPUT_PARAM_ERROR: getHttpError(400, 'INPUT_PARAM_ERROR'),
  INACTIVE_ERROR: getHttpError(503, 'INACTIVE_ERROR'),
  VALIDATION_ERROR: getHttpError(400, 'VALIDATION_ERROR'),
  NOT_FOUND: getHttpError(404, 'NOT_FOUND'),
  USER_NOT_FOUND: getHttpError(404, 'USER_NOT_FOUND'),
  NOT_IMPLEMENTED: getHttpError(501, 'NOT_IMPLEMENTED'),
  AGGREGATOR_NOT_AVAILABLE: getHttpError(503, 'AGGREGATOR_NOT_AVAILABLE'),
  AGGREGATOR_BAD_PASS: getHttpError(503, 'AGGREGATOR_BAD_PASS'),
  PASSWORDS_BASE64_CORRUPTED: getHttpError(400, 'PASSWORDS_BASE64_CORRUPTED'),
  LOGIN_VALIDATION_ERROR: getHttpError(400, 'LOGIN_VALIDATION_ERROR'),
  SIGNUP_VALIDATION_ERROR: getHttpError(400, 'SIGNUP_VALIDATION_ERROR'),
  CHECKUSER_VALIDATION_ERROR: getHttpError(400, 'CHECKUSER_VALIDATION_ERROR'),
  UPDATEUSER_VALIDATION_ERROR: getHttpError(400, 'UPDATEUSER_VALIDATION_ERROR'),
  PASSWORDS_NO_MATCH_ERROR: getHttpError(400, 'PASSWORDS_NO_MATCH_ERROR'),
  AGGREGATOR_ACCOUNTID_ERROR: getHttpError(400, 'AGGREGATOR_ACCOUNTID_ERROR'),
  AGGREGATOR_DATES_ERROR: getHttpError(400, 'AGGREGATOR_DATES_ERROR'),
  CONFLICT_ERROR: getHttpError(409, 'CONFLICT_ERROR'),
  INVALID_JWT_TOKEN: getHttpError(401, 'INVALID_JWT_TOKEN'),
  VERIFY_EMAIL: getHttpError(403, 'VERIFY_EMAIL'),
  VERIFY_PHONE: getHttpError(403, 'VERIFY_PHONE')
};
